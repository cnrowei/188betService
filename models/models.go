package models

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"time"

	"github.com/jinzhu/gorm"
	_ "github.com/lib/pq"
)

var (
	db *gorm.DB
)

func init() {
	var err error
	db, err = gorm.Open("postgres", fmt.Sprintf("postgres://%v:%v@localhost/%v?sslmode=disable", "root", "ishgishg", "bet18888"))
	if err != nil {
		panic(err)
	} else {

		// 创建数据库
		db.AutoMigrate(&Users{}, &Wagers{}, &Selections{}, &Draws{}, &Counters{})
		db.Debug()
		db.LogMode(true)
	}

}

func InitData() {

	fmt.Println("##################  add user admin Start! #####################")
	user := Users{Id: 1, Username: "admin", Password: "498619c053f00fd6", Agentid: 0, Role: 3, Currency: "RMB", Odds: "A", Status: true, Login: true, Created: time.Now(), Updated: time.Now()}
	if has := db.NewRecord(&user); !has {
		db.Create(&user)
	}

	counters := make([]Counters, 6)
	counters[0] = Counters{Id: 310, Name: "ShangHai", Official: "http://fucai.eastday.com/LotteryNew/app_SSSL.aspx", Status: 4, Seq: 0, Ballcount: 3, Resultopenintervalsecond: 0, Resultwaitingintervalsecond: 0}
	counters[1] = Counters{Id: 320, Name: "Chongqing", Official: "http://www.cqcp.net/game/ssc/", Status: 2, Seq: 2, Ballcount: 5, Resultopenintervalsecond: 0, Resultwaitingintervalsecond: 0}
	counters[2] = Counters{Id: 330, Name: "JiangXi", Official: "http://data.shishicai.cn/jxssc/haoma/", Status: 4, Seq: 3, Ballcount: 5, Resultopenintervalsecond: 0, Resultwaitingintervalsecond: 0}
	counters[3] = Counters{Id: 340, Name: "TianJing", Official: "http://www.tjflcpw.com/report/SSC_WinMessage.aspx", Status: 4, Seq: 4, Ballcount: 5, Resultopenintervalsecond: 0, Resultwaitingintervalsecond: 0}
	counters[4] = Counters{Id: 350, Name: "ChinaSwl3D", Official: "http://www.zhcw.com/3d/kaijiangshuju/index.shtml?type=0", Status: 4, Seq: 1, Ballcount: 3, Resultopenintervalsecond: 0, Resultwaitingintervalsecond: 0}
	counters[5] = Counters{Id: 360, Name: "XinJiang", Official: "http://www.xjflcp.com/game/sscIndex", Status: 2, Seq: 5, Ballcount: 5, Resultopenintervalsecond: 0, Resultwaitingintervalsecond: 0}

	fmt.Println("##################  add counters! #####################")
	for i := 0; i <= 5; i++ {
		if has := db.NewRecord(&counters[i]); !has {
			fmt.Println("counters:", has)
			db.Create(&counters[i])
		} else {
			fmt.Println("counters:", has)
		}
	}

	fmt.Println("##################  add json 320! #####################")
	initSelection("json/320.json", 320)
	initSelection("json/360.json", 360)
	fmt.Println("##################  end start #####################")
}

//初始化投注数据
func initSelection(filename string, counterid int64) {

	type AutoGenerated struct {
		Name   string  `json:"name"`
		ID     int     `json:"id"`
		Odds   float64 `json:"odds"`
		MinBet float64 `json:"minBet"`
		MaxBet float64 `json:"maxBet"`
	}

	fmt.Println("##################  initSelection! #####################")

	fi, err := os.Open(filename)
	if err != nil {
		panic(err)
	}
	defer fi.Close()
	fd, err := ioutil.ReadAll(fi)

	var dat []AutoGenerated

	if err := json.Unmarshal([]byte(fd), &dat); err != nil {
		log.Fatalln("json unmarshal error:", err)
	} else {

		//读取JSON数据
		for _, v := range dat {

			has, _ := FindSelection(v.Name, counterid)

			//fmt.Println("HAS", v.Name, v.Odds, v.MinBet, v.MaxBet)
			if has == 0 {
				fmt.Println("HAS", has, v.Name, v.Odds, v.MinBet, v.MaxBet)

				sel := &Selections{}
				sel.Name = v.Name
				sel.Counterid = counterid
				sel.Odds = v.Odds
				sel.Minbet = v.MinBet
				sel.Maxbet = v.MaxBet

				NewSelection(sel)

			}

		}
	}

	fmt.Println("##################  Service Start! #####################")
}
