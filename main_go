package main

import (
	json "encoding/json"
	"fmt"
	io "io/ioutil"
	"time"
)

type ValueTestAtmp struct {
	StringValue    string
	NumericalValue int
	BoolValue      bool
}

type testdata struct {
	ValueTestA ValueTestAtmp
}

func main() {
	JsonParse := NewJsonStruct()
	v := testdata{}
	JsonParse.Load("jsonparse_config.json", &v)
	fmt.Println(v)
	fmt.Println(v.ValueTestA)
	fmt.Println(v.ValueTestA.StringValue)

	CCjson()
}

func NewJsonStruct() *JsonStruct {
	return &JsonStruct{}

}

type JsonStruct struct {
}

func (self *JsonStruct) Load(filename string, v interface{}) {
	data, err := io.ReadFile(filename)
	if err != nil {
		return
	}

	datajson := []byte(data)
	err = json.Unmarshal(datajson, &v)
	if err != nil {
		return
	}
}

func CCjson() {

	data, err := io.ReadFile("jsonparse_config.json")
	if err != nil {
		fmt.Println(err.Error)
	}

	var v AutoGenerated
	datajson := []byte(data)
	err = json.Unmarshal(datajson, &v)
	if err != nil {
		fmt.Println(err.Error)
	}

	fmt.Println(v)
	fmt.Println(v.Data)
	fmt.Println(v.Data.Counters)
}

type AutoGenerated struct {
	IsSuccess bool `json:"isSuccess"`
	Data      struct {
		Announcements []interface{} `json:"announcements"`
		OpenBets      struct {
			TotalCount        int           `json:"totalCount"`
			TotalStake        float64       `json:"totalStake"`
			TotalReturnAmount float64       `json:"totalReturnAmount"`
			Wagers            []interface{} `json:"wagers"`
		} `json:"openBets"`
		Counters []struct {
			ID       int    `json:"id"`
			Name     string `json:"name"`
			Official string `json:"official"`
			Status   int    `json:"status"`
			Draw     struct {
				DrawNo          int       `json:"drawNo"`
				DrawStatus      int       `json:"drawStatus"`
				StartTime       time.Time `json:"startTime"`
				EndTime         time.Time `json:"endTime"`
				BetClosedMMSS   string    `json:"betClosedMMSS"`
				IsCloseManually bool      `json:"isCloseManually"`
			} `json:"draw"`
			Selections struct {
			} `json:"selections"`
			GameResult struct {
			} `json:"gameResult"`
			Seq                         int `json:"seq"`
			BallCount                   int `json:"ballCount"`
			ResultOpenIntervalSecond    int `json:"resultOpenIntervalSecond"`
			ResultWaitingIntervalSecond int `json:"resultWaitingIntervalSecond"`
		} `json:"counters"`
		TrendsList []struct {
			CounterID int `json:"counterId"`
			Trends    []struct {
				CounterID   int       `json:"counterId"`
				DrawNo      int       `json:"drawNo"`
				DrawTime    time.Time `json:"drawTime"`
				DrawStatus  int       `json:"drawStatus"`
				VoidReason  int       `json:"voidReason"`
				ResultBalls []int     `json:"resultBalls"`
			} `json:"trends"`
		} `json:"trendsList"`
		BetSlip string `json:"betSlip"`
		Member  struct {
			MemberID     int    `json:"MemberId"`
			MemberName   string `json:"MemberName"`
			CurrencyCode string `json:"CurrencyCode"`
			Balance      string `json:"Balance"`
		} `json:"member"`
	} `json:"data"`
}
